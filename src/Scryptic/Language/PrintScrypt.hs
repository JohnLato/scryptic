{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Scryptic.Language.PrintScrypt where

-- pretty-printer generated by the BNF converter

import Scryptic.Language.AbsScrypt
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Scrypt where
  prt i e = case e of
   OneBlock block -> prPrec i 0 (concatD [prt 0 block])
   MultiBlock blocks -> prPrec i 0 (concatD [prt 0 blocks])


instance Print Block where
  prt i e = case e of
   Block blockopts stmts -> prPrec i 0 (concatD [prt 0 blockopts , prt 0 stmts])

  prtList es = case es of
   [x] -> (concatD [doc (showString "{") , prt 0 x , doc (showString "}")])
   x:xs -> (concatD [doc (showString "{") , prt 0 x , doc (showString "}") , prt 0 xs])

instance Print BlockOpt where
  prt i e = case e of
   TitleOpt id -> prPrec i 0 (concatD [doc (showString "title") , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Stmt where
  prt i e = case e of
   Wait expr -> prPrec i 0 (concatD [doc (showString "wait") , prt 0 expr])
   Write skey soptval -> prPrec i 0 (concatD [doc (showString "write") , prt 0 skey , prt 0 soptval])
   WriteSync skey soptval expr -> prPrec i 0 (concatD [doc (showString "write") , prt 0 skey , prt 0 soptval , doc (showString "sync") , prt 0 expr])
   Watch skey -> prPrec i 0 (concatD [doc (showString "watch") , prt 0 skey])
   Unwatch skey -> prPrec i 0 (concatD [doc (showString "unwatch") , prt 0 skey])
   Sleep snum -> prPrec i 0 (concatD [doc (showString "sleep") , prt 0 snum])
   SetOpt skey id -> prPrec i 0 (concatD [doc (showString "opt") , prt 0 skey , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Expr where
  prt i e = case e of
   OrExpr expr0 expr -> prPrec i 0 (concatD [prt 0 expr0 , doc (showString "||") , prt 1 expr])
   AndExpr expr0 expr -> prPrec i 1 (concatD [prt 1 expr0 , doc (showString "&&") , prt 2 expr])
   CmpExpr expr0 cmpop expr -> prPrec i 2 (concatD [prt 5 expr0 , prt 0 cmpop , prt 4 expr])
   RCmpExpr sval0 cmpop1 skey cmpop sval -> prPrec i 3 (concatD [prt 0 sval0 , prt 0 cmpop1 , prt 0 skey , prt 0 cmpop , prt 0 sval])
   RConstExpr sval -> prPrec i 4 (concatD [prt 0 sval])
   KeyExpr skey -> prPrec i 5 (concatD [prt 0 skey])


instance Print SKey where
  prt i e = case e of
   SKey namequals id -> prPrec i 0 (concatD [prt 0 namequals , prt 0 id])


instance Print NameQual where
  prt i e = case e of
   NameQual id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , doc (showString ".") , prt 0 xs])

instance Print SOptVal where
  prt i e = case e of
   SOptVal sval -> prPrec i 0 (concatD [prt 0 sval])
   SOptNone  -> prPrec i 0 (concatD [])


instance Print SVal where
  prt i e = case e of
   SValNum snum -> prPrec i 0 (concatD [prt 0 snum])
   SValStr str -> prPrec i 0 (concatD [prt 0 str])


instance Print SNum where
  prt i e = case e of
   IntNum n -> prPrec i 0 (concatD [prt 0 n])
   DubNum d -> prPrec i 0 (concatD [prt 0 d])


instance Print CmpOp where
  prt i e = case e of
   EqOp  -> prPrec i 0 (concatD [doc (showString "==")])
   NEqOp  -> prPrec i 0 (concatD [doc (showString "/=")])
   LtOp  -> prPrec i 0 (concatD [doc (showString "<")])
   GtOp  -> prPrec i 0 (concatD [doc (showString ">")])
   LEqOp  -> prPrec i 0 (concatD [doc (showString "<=")])
   GEqOp  -> prPrec i 0 (concatD [doc (showString ">=")])



