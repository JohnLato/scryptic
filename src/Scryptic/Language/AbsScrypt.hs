{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
module Scryptic.Language.AbsScrypt where

-- Haskell module generated by the BNF converter


import Data.Data (Data,Typeable)
import GHC.Generics (Generic)
newtype Ident = Ident String deriving (Eq,Ord,Show,Data,Typeable,Generic)
data Scrypt =
   OneBlock Block
 | MultiBlock [Block]
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data Block =
   Block [BlockOpt] [Stmt]
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data BlockOpt =
   TitleOpt Ident
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data Stmt =
   Wait Expr
 | Write SKey SOptVal
 | WriteSync SKey SOptVal Expr
 | Watch SKey
 | Unwatch SKey
 | Sleep SNum
 | SetOpt SKey Ident
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data Expr =
   OrExpr Expr Expr
 | AndExpr Expr Expr
 | CmpExpr Expr CmpOp Expr
 | RCmpExpr SVal CmpOp SKey CmpOp SVal
 | RConstExpr SVal
 | KeyExpr SKey
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data SKey =
   SKey [NameQual] Ident
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data NameQual =
   NameQual Ident
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data SOptVal =
   SOptVal SVal
 | SOptNone
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data SVal =
   SValNum SNum
 | SValStr String
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data SNum =
   IntNum Integer
 | DubNum Double
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

data CmpOp =
   EqOp
 | NEqOp
 | LtOp
 | GtOp
 | LEqOp
 | GEqOp
  deriving (Eq,Ord,Show,Data,Typeable,Generic)

